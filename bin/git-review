#!/usr/bin/python2.6
#
# Copyright (c) 2013 by Delphix.
# All rights reserved.
#

#
# Git integration with post-review. It both uses the post-review python
# modules and borrows from its source code (hence the copyright notice below).
#

#
# Copyright (c) 2007-2010  Christian Hammond
# Copyright (c) 2007-2010  David Trowbridge
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to
# deal in the Software without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
# sell copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#

import os
import sys
import re
import rbtools.postreview
import rbtools.clients
import rbtools.utils.process
from optparse import OptionParser


def update_review(branch):
    rbtools.postreview.options.description = rbtools.utils.process.execute(
        ["git", "log", "--pretty=%B", "-1"],
        ignore_errors=True).strip()

    bugs = []
    lastbug = None

    for line in rbtools.postreview.options.description.split("\n"):
        lastbug = line
        try:
            bugs.append(re.compile("^(\d+)").match(line).group(1))
        except Exception:
            pass

    rbtools.postreview.options.bugs_closed = ",".join(bugs)

    hotfix = None

    merge = rbtools.utils.process.execute(
        ["git", "config", "--get", "branch." + branch + ".merge"],
        ignore_errors=True)
    if not merge:
        try:
            hotfix = rbtools.utils.process.execute(
                ["git", "describe", "--tags", "--match=release/*",
                    "--abbrev=0"], ignore_errors=False).strip()
        except Exception:
            print "branch.%s.merge is not set in your git config" % branch
            print "  git branch --set-upstream %s origin/<upstream>" % branch
            sys.exit(1)

    if bugs:
        if hotfix:
            rbtools.postreview.options.summary = "HOTFIX for " + lastbug
        elif len(bugs) == 1:
            rbtools.postreview.options.summary = "fix for " + lastbug
        else:
            rbtools.postreview.options.summary = ("fixes for %s" %
                    rbtools.postreview.options.bugs_closed)

    if hotfix:
        rbtools.postreview.options.branch = hotfix
        rbtools.postreview.options.parent_branch = "HEAD^"
    else:
        rbtools.postreview.options.branch = re.compile(
            "refs/heads/(.*)").match(merge).group(1)


def diff_files(self, files):
    self.merge_base = rbtools.utils.process.execute(["git", "merge-base",
        self.upstream_branch, self.head_ref]).strip()
    rev_range = "%s.." % self.merge_base
    diff_lines = rbtools.utils.process.execute(["git", "diff", "--no-color",
        "--full-index", "--no-ext-diff", rev_range, "--"] + files)
    parent_diff_lines = None

    return (diff_lines, parent_diff_lines)


def main():
    origcwd = os.path.abspath(os.getcwd())

    parser = OptionParser(usage="%prog [-l filelist.txt]")
    parser.add_option("-l", "--file-list",
                      dest="file_list", default=None,
                      help="diff only the file names listed in the file")
    parser.add_option("-u", "--update",
                      dest="update", action="store_true", default=False,
                      help="update metadata based on bugs")
    parser.add_option("--Xpostreview", action="append",
                      dest="pra", help="One arg to pass on to post-review. " +
                      "This flag may be passed multiple times.")
    (opts, args) = parser.parse_args(sys.argv[1:])

    if 'APPDATA' in os.environ:
        homepath = os.environ['APPDATA']
    elif 'HOME' in os.environ:
        homepath = os.environ["HOME"]
    else:
        homepath = ''

    # Load the config and cookie files
    cookie_file = os.path.join(homepath, ".post-review-cookies.txt")
    _, rbtools.postreview.configs = rbtools.postreview.load_config_files(homepath)

    args = rbtools.postreview.parse_options(opts.pra)

    repository_info, tool = rbtools.clients.scan_usable_client(
        rbtools.postreview.options)

    # Verify that options specific to an SCM Client have not been mis-used.
    tool.check_options()

    # Try to find a valid Review Board server to use.
    if rbtools.postreview.options.server:
        server_url = options.server
    else:
        server_url = tool.scan_for_server(repository_info)

    if not server_url:
        print "Unable to find a Review Board server for this source code tree."
        sys.exit(1)

    server = rbtools.postreview.ReviewBoardServer(server_url,
        repository_info, cookie_file)
    server.check_api_version()

    if repository_info.supports_changesets:
        changenum = tool.get_changenum(args)
    else:
        changenum = None

    # rbtools.postreview.options.parent_branch = "HEAD^"

    #
    # Connect to the reviewboard server.
    #
    server.login()

    branch = os.path.basename(rbtools.utils.process.execute(
        ["git", "symbolic-ref", "HEAD"], ignore_errors=True).strip())

    #
    # Customize the review variable according to the file list specified.
    #
    if opts.file_list:
        ridname = "rid-" + re.sub(r'[^a-z-]', r'-', opts.file_list)
    else:
        ridname = "rid"

    rid = rbtools.utils.process.execute(
        ["git", "config", "--get", "branch." + branch + "." + ridname],
        ignore_errors=True).strip()
    if rid and server.get_review_request(rid)["status"] != "pending":
        rid = None

    if rid:
        rbtools.postreview.options.rid = rid
    else:
        opts.update = True
        update_review(branch)

    #
    # Generate the diffs.
    #
    if rbtools.postreview.options.revision_range:
        diff = tool.diff_between_revisions(
            rbtools.postreview.options.revision_range, args, repository_info)
        parent_diff = None
    elif rbtools.postreview.options.diff_filename:
        parent_diff = None

        if rbtools.postreview.options.diff_filename == '-':
            diff = sys.stdin.read()
        else:
            try:
                fp = open(os.path.join(origcwd,
                    rbtools.postreview.options.diff_filename), 'r')
                diff = fp.read()
                fp.close()
            except IOError, e:
                rbtools.postreview.die("Unable to open diff filename: %s" % e)
    elif opts.file_list:
        f = open(opts.file_list)
        files = [fn.strip() for fn in f.readlines()]
        f.close()
        tool.__class__.diff_files = diff_files
        diff, parent_diff = tool.diff_files(files)
    else:
        diff, parent_diff = tool.diff(args)

    if len(diff) == 0:
        rbtools.postreview.die("There don't seem to be any diffs!")

    review_url = rbtools.postreview.tempt_fate(server, tool, changenum,
                            diff_content=diff,
                            parent_diff_content=parent_diff,
                            submit_as=rbtools.postreview.options.submit_as)

    rid = re.compile("%s/*r/(.*)/" % server_url).match(review_url).group(1)

    #
    # Store the rid in the .git/config file.
    #
    rbtools.utils.process.execute(["git", "config",
        "branch." + branch + "." + ridname, rid],
        ignore_errors=True).strip()

main()

sys.exit(0)

#!/bin/sh
#
# Copyright (c) 2011 by Delphix.
# All rights reserved.
#

USAGE="[--no-commit | -n] [revision]"
LONG_USAGE="\
Collapse the commits since the specified revision (the default is ORIGIN).
If the --no-commit option is specified, the changes are left uncommitted
in the workspace. Otherwise, git commit is invoked with the sorted, uniquified
concatenation of the comments from the collaped commits.
"

SUBDIRECTORY_OK=Yes
OTPIONS_SPEC="\
git recommit [options]
--
n,no-commit	don't automatically commit; leave changes uncommitted
"

. git-sh-setup

#
# This lived in git-rebase--interactive until 1.7.4 -- we can remove this once
# users are on 1.7.4.*.
#
require_clean_work_tree () {
	git rev-parse --verify HEAD >/dev/null || exit 1
	git update-index -q --ignore-submodules --refresh
	err=0

	if ! git diff-files --quiet --ignore-submodules
	then
		echo >&2 "Cannot $1: You have unstaged changes."
		err=1
	fi

	if ! git diff-index --cached --quiet --ignore-submodules HEAD --
	then
		if [ $err = 0 ]
		then
		    echo >&2 "Cannot $1: Your index contains uncommitted changes."
		else
		    echo >&2 "Additionally, your index contains uncommitted changes."
		fi
		err=1
	fi

	if [ $err = 1 ]
	then
		test -n "$2" && echo >&2 "$2"
		exit 1
	fi
}


require_work_tree
cd_to_toplevel

while test $# != 0
do
	case "$1" in
	-n|--no-commit) no_commit=t ;;
	--) shift; break ;;
	-*) usage ;;
	*) break ;;
	esac
	shift
done

test $# -gt 1 && usage

base=origin
test $# -gt 0 && base=$1

require_clean_work_tree "recommit" "Please commit or stash them."

git rev-parse --verify $base >/dev/null 2>&1 || die "invalid revision '$base'"

head=$(git rev-parse HEAD)
origin=$(git rev-parse $base)

HEADNAME=$(git symbolic-ref HEAD)

#
# Reset the workspace back to a previous state.
#
output=$(git checkout origin 2>&1)
if test $? != 0
then
	echo $output
	die "failed to checkout origin"
fi

newhead=$(git rev-parse HEAD)

git update-ref -m "recommit: $HEADNAME $origin" $HEADNAME $newhead $head
git symbolic-ref HEAD $HEADNAME

git rev-list --reverse $origin..$head | \
while read rev
do
	echo replaying $rev
	git cherry-pick -n $rev
done

if test t != "$no_commit"
then
	#
	# Seed the commit message and perform the commit.
	#
	COMMIT_FILE=$GIT_DIR/recommit_msg
	git log --pretty="%B" $origin..$head | \
	    sed -n '$!p' | sort | uniq >$COMMIT_FILE
	git commit --file="$COMMIT_FILE" --edit
	rm -f $COMMIT_FILE
fi

exit 0

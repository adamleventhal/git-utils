#!/bin/sh
#
# Copyright (c) 2013 by Delphix.
# All rights reserved.
#

SUBDIRECTORY_OK=Yes
OPTIONS_SPEC="\
git recommit [options] [revision]
--
n,no-commit don't automatically commit; leave files uncommitted
m,message=  specify commit message
F,file=     read log from file
"

. git-sh-setup

#
# This lived in git-rebase--interactive until 1.7.4 -- we can remove this once
# users are on 1.7.4.*.
#
require_clean_work_tree () {
	git rev-parse --verify HEAD >/dev/null || exit 1
	git update-index -q --ignore-submodules --refresh
	err=0

	if ! git diff-files --quiet --ignore-submodules
	then
		echo >&2 "Cannot $1: You have unstaged changes."
		err=1
	fi

	if ! git diff-index --cached --quiet --ignore-submodules HEAD --
	then
		if [ $err = 0 ]
		then
		    echo >&2 "Cannot $1: Your index contains uncommitted changes."
		else
		    echo >&2 "Additionally, your index contains uncommitted changes."
		fi
		err=1
	fi

	if [ $err = 1 ]
	then
		test -n "$2" && echo >&2 "$2"
		exit 1
	fi
}

require_work_tree
cd_to_toplevel

COMMIT_FILE=$GIT_DIR/recommit_msg

no_commit=
message=
file=

while test $# != 0
do
	case "$1" in
	-n|--no-commit)
		no_commit=t
		;;
	-m|--message)
		message=t
		message_data="$2"
		shift
		;;
	--message=*)
		message=t
		message_data="$(expr " $1" : ' --message=\(.*\)')"
		;;
	-F|--file)
		file=t
		file_data="$2"
		shift
		;;
	--file=*)
		file=t
		file_data="$(expr " $1" : ' --message=\(.*\)')"
		;;
	--) shift; break ;;
	-*) usage ;;
	*) break ;;
	esac
	shift
done

case "$no_commit,$file,$message" in
	t,*t*)	die "fatal: Option -n cannot be combined with -m or -F." ;;
	,t,t)	die "fatal: Option -m cannot be combined with -F." ;;
esac

test $# -gt 1 && usage

require_clean_work_tree "recommit" "Please commit or stash them."

if test $# -gt 0
then
	base=$1
else

	branch="$(git symbolic-ref HEAD 2>/dev/null)" || \
	    die "fatal: Detached head."

	base=$(git for-each-ref --format="%(upstream)" $branch)
	[[ -z "$base" ]] && die "fatal: No upstream set for '$branch'"
fi

oldhead=$(git rev-parse HEAD)

#
# Find the common ancestor to roll back to.
#
mergebase=$(git merge-base $base $oldhead)

#
# Reset HEAD to our common ancestor while preserving the list of added,
# deleted, or modified files.
#
git reset --soft $mergebase

case "$no_commit,$file,$message" in
	t,*)	;;
	,t,)	git commit --file="$file_data" ;;
	,,t)	git commit --message="$message_data" ;;
	,,)
		#
		# Seed the commit message and perform the commit.
		#
		git log --pretty="%B" $mergebase..$oldhead | sed -n '$!p' | \
		    grep -v '^Merge branch' | sort | uniq >"$COMMIT_FILE"
		git commit --file="$COMMIT_FILE" --edit
		rm -f "$COMMIT_FILE"
		;;
esac

exit 0
